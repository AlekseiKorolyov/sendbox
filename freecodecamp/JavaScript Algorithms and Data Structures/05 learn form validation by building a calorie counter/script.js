const calorieCounter = document.getElementById("calorie-counter");
const budgetNumberInput = document.getElementById("budget");
const entryDropdown = document.getElementById("entry-dropdown");
const addEntryButton = document.getElementById("add-entry");
const clearButton = document.getElementById("clear");
const output = document.getElementById("output");
let isError = false;

function cleanInputString(str) {
    const regex = /[+-\s]/g;
    return str.replace(regex, "");
}

function isInvalidInput(str) {
    const regex = /e/i;
}























/*

17          is или has
19          регулярные выражения
20          экранирование символа «+»
23          Регулярное выражение Флаг g
30          флаг i, который означает «нечувствительный»








Шаг 17

В программировании добавление префикса is или has к переменной — распространённая практика, указывающая на то, что переменная представляет собой логическое значение. Вот несколько примеров:
Пример кода

let isRunning = true;
let hasCompleted = false;

Объявите переменную с именем isError с помощью let и инициализируйте её значением false, что позволит впоследствии переназначить её. Позже в проекте вы обновите значение isError, если пользователь введёт недопустимое значение.



Шаг 19

Для поиска определённых символов в строке можно использовать регулярные выражения, или сокращённо «регулярное выражение». Регулярное выражение в JavaScript обозначается шаблоном, заключённым в косые черты. Следующий пример будет соответствовать строковому литералу «hello»:
Пример кода

const regex = /hello/;

Объявите переменную регулярного выражения и присвойте ей значение из примера выше. В дальнейшем вы обновите этот шаблон регулярного выражения для поиска определённых символов, необходимых для счётчика калорий.





Шаг 20

Текущий шаблон будет точно соответствовать тексту «hello», что не является желаемым результатом. Вместо этого нужно искать +, - или пробелы. Замените шаблон в переменной регулярного выражения на \+- для соответствия символам «плюс» и «минус». Обратите внимание, что для экранирования символа «+» необходимо использовать обратную косую черту \, поскольку он имеет особое значение в регулярных выражениях.

const regex = /\+-/;



Шаг 21

В регулярных выражениях сокращённые классы символов позволяют сопоставлять определённые символы без необходимости их указания в шаблоне. Классы символов начинаются с обратной косой черты (\). Класс символов \s будет соответствовать любому пробелу. Добавьте его в шаблон регулярного выражения.

const regex = /\+-\s/;



Шаг 22

Ваш текущий шаблон пока не работает. /+-\s/ ищет +, - и пробел по порядку. Это будет соответствовать +- hello, но не +hello. Чтобы шаблон соответствовал каждому из этих символов по отдельности, необходимо преобразовать их в класс символов. Это делается путем заключения соответствующих символов в скобки. Например, этот шаблон будет соответствовать символам h, e, l или o:
Пример кода

const regex = /[helo]/;

Преобразуйте ваш шаблон +-\s в класс символов. Обратите внимание, что вам больше не нужно экранировать символ +, поскольку вы используете класс символов.


const regex = /[+-\s]/;




Шаг 23

Регулярное выражение также может принимать определённые флаги для изменения поведения сопоставления с шаблоном. Флаги добавляются после закрывающего символа /. Флаг g, который означает «глобальный», указывает шаблону продолжать поиск после нахождения совпадения. Вот пример:
Пример кода

const helloRegex = /hello/g;

Добавьте флаг g к шаблону регулярного выражения.

 function cleanInputString(str) {
  console.log("original string: ", str);
  const regex = /[+-\s]/g;
  return str.replace(regex, '');
}

console.log(cleanInputString("+-99"));



Шаг 30

Буква «e» в числовом вводе также может быть заглавной буквой «E». Однако в регулярном выражении для этого есть флаг i, который означает «нечувствительный».
Пример кода

/Hello/i

Регулярное выражение выше будет соответствовать hello, Hello, HELLO и даже hElLo благодаря флагу i. Этот флаг делает ваш шаблон нечувствительным к регистру. Добавьте флаг i к шаблону вашего регулярного выражения.

const regex = /e/i;





 */