const calorieCounter = document.getElementById("calorie-counter");
const budgetNumberInput = document.getElementById("budget");
const entryDropdown = document.getElementById("entry-dropdown");
const addEntryButton = document.getElementById("add-entry");
const clearButton = document.getElementById("clear");
const output = document.getElementById("output");
let isError = false;

function cleanInputString(str) {
    const regex = /\+-/;
}























/*

17          is или has
19          регулярные выражения
20          экранирование символа «+»


Шаг 17

В программировании добавление префикса is или has к переменной — распространённая практика, указывающая на то, что переменная представляет собой логическое значение. Вот несколько примеров:
Пример кода

let isRunning = true;
let hasCompleted = false;

Объявите переменную с именем isError с помощью let и инициализируйте её значением false, что позволит впоследствии переназначить её. Позже в проекте вы обновите значение isError, если пользователь введёт недопустимое значение.



Шаг 19

Для поиска определённых символов в строке можно использовать регулярные выражения, или сокращённо «регулярное выражение». Регулярное выражение в JavaScript обозначается шаблоном, заключённым в косые черты. Следующий пример будет соответствовать строковому литералу «hello»:
Пример кода

const regex = /hello/;

Объявите переменную регулярного выражения и присвойте ей значение из примера выше. В дальнейшем вы обновите этот шаблон регулярного выражения для поиска определённых символов, необходимых для счётчика калорий.





Шаг 20

Текущий шаблон будет точно соответствовать тексту «hello», что не является желаемым результатом. Вместо этого нужно искать +, - или пробелы. Замените шаблон в переменной регулярного выражения на \+- для соответствия символам «плюс» и «минус». Обратите внимание, что для экранирования символа «+» необходимо использовать обратную косую черту \, поскольку он имеет особое значение в регулярных выражениях.

const regex = /\+-/;







 */